---
http_interactions:
- request:
    method: get
    uri: https://api.themoviedb.org/3/movie/upcoming?api_key=<MOVIE_API_KEY>
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Thu, 15 Oct 2020 01:29:37 GMT
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      Vary:
      - Accept-Encoding
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 6c02603f677dd5669f8ab3b41062340f.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - DEN50-C2
      X-Amz-Cf-Id:
      - NR324YVv121xG0_dsurwhfi0JPRF3Lb1VY0hznNBDLcbu2aXZs6SAw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 15 Oct 2020 01:29:37 GMT
recorded_with: VCR 6.0.0
